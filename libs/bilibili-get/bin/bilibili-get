#!/usr/bin/env node

var debug = require('debug').debug('bilibili:cli');
var process = require('process');
var program = require('commander');
var pkginfo = require('../package.json');
var commandExists = require('command-exists').sync;
var __main__ = require('../lib');
var co = require('co');

program
  .usage('[options] <url>')
  .option('-o, --output [pattern]', 'set output pattern', 'av%(aid)s %(title)s%(#index&&"\\(")s%(index)s%(#index&&"\\)")s%(#index_title&&" ")s%(index_title)s.%(ext)s')
  .option('-f, --output-format [format]', 'set merged output format [flv/mkv/mp4]')
  .option('-q, --quality [value]', 'set video quality', '112')
  .option('-l, --list-formats', 'list available format/quality for video(s)')
  .option('-C, --cookie [cookieString]', 'set cookie string')
  .option('-O, --download-options [key=value]', 'set extra aria2c command-line options', (el, l) => [ ...l, el  ], [])
  .option('-d, --dry-run', 'run the program without any download')
  .option('-s, --silent', 'suppress video quality output')
  .version(pkginfo.version)
  .parse(process.argv);

if (!commandExists('aria2c')) {
  console.error('ERROR: aria2c: command not found.');
  console.error('Please download and install aria2 with package manager or follow installation\ninstructions on <https://aria2.github.io/>.');
  process.exit(1);
}

if (!commandExists('ffmpeg')) {
  console.error('ERROR: ffmpeg: command not found.');
  console.error('Please download and install ffmpeg with package manager or follow installation\ninstructions from ffmpeg project <https://ffmpeg.org/>.');
  process.exit(1);
}

if (program.args.length !== 1) {
  program.outputHelp();
  process.exit(1);
}

co(__main__(program.args[0], program)).then(() => {
  debug('process finished.');
}).catch((err) => {
  debug(err);
  console.error(`ERROR: ${err.message}`);
  process.exit(1);
});


